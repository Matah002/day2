# Abstraction

from abc import ABC, abstractmethod
class Shape(ABC):
    @abstractmethod
    def area(self):
        pass

# Class, Object, Encapsulation
    
class Circle(Shape):
    def __init__(self, radius):
        self.__radius = radius # Encapsulated attributed
    
    def area(self):
        return 3.14 * self.__radius * self.__radius
    
# Inheritance

class Square(Shape):
    def __init__(self, side):
        self.__side = side 
    
    def area(self):
        return self.__side * self.__side

 # Polymorphism
       
def print_area(shape):
    print("Area:", shape.area())

# Create objects and demonstrate polymorphism
    
circle = Circle(5)
square = Square(4)

print_area(circle)
print_area(square)

class Employee:
    def __init__(self, name, age, department, IDnumber):
        self.name = name
        self.age = age
        self.department = department
        self.IDnumber = IDnumber

    def display_employee_details(self):
        print(f"name: {self.name}")
        print(f"age: {self.age}")
        print(f"department: {self.department}")
        print(f"IDnumber: {self.IDnumber}")
    
employee1 = Employee("James", "19", "Finance", 1)
employee1.display_employee_details()

print()

employee2 = Employee("Fee", 19, "Health", 2)
employee2.display_employee_details()
    
print()

employee3 = Employee("Ian", 20, "Math", 3)
employee3.display_employee_details()

print()

employee4 = Employee("Josh", 21, "Science", 4)
employee4.display_employee_details()


class A():

    def __init__(self,count=100):

         self.count=count

obj1=A()

obj2=A(102)

print(obj1.count)

print(obj2.count)




